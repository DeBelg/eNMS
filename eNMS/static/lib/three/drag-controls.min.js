var DragControls=function(e,t,n){var r=new THREE.Plane,o=new THREE.Raycaster,i=new THREE.Vector2,a=new THREE.Vector3,s=new THREE.Vector3,c=new THREE.Vector3,l=new THREE.Matrix4,p=[],u=null,v=null,d=this;function h(){n.addEventListener("pointermove",E,!1),n.addEventListener("pointerdown",y,!1),n.addEventListener("pointerup",f,!1),n.addEventListener("pointerleave",f,!1),n.addEventListener("touchmove",g,!1),n.addEventListener("touchstart",b,!1),n.addEventListener("touchend",j,!1)}function m(){n.removeEventListener("pointermove",E,!1),n.removeEventListener("pointerdown",y,!1),n.removeEventListener("pointerup",f,!1),n.removeEventListener("pointerleave",f,!1),n.removeEventListener("touchmove",g,!1),n.removeEventListener("touchstart",b,!1),n.removeEventListener("touchend",j,!1),n.style.cursor=""}function E(h){switch(h.preventDefault(),h.pointerType){case"mouse":case"pen":!function(h){var m=n.getBoundingClientRect();if(i.x=(h.clientX-m.left)/m.width*2-1,i.y=-(h.clientY-m.top)/m.height*2+1,o.setFromCamera(i,t),u&&d.enabled)return o.ray.intersectPlane(r,s)&&u.position.copy(s.sub(a).applyMatrix4(l)),void d.dispatchEvent({type:"drag",object:u});if(p.length=0,o.setFromCamera(i,t),o.intersectObjects(e,!0,p),p.length>0){var E=p[0].object;r.setFromNormalAndCoplanarPoint(t.getWorldDirection(r.normal),c.setFromMatrixPosition(E.matrixWorld)),v!==E&&(d.dispatchEvent({type:"hoveron",object:E}),n.style.cursor="pointer",v=E)}else null!==v&&(d.dispatchEvent({type:"hoveroff",object:v}),n.style.cursor="auto",v=null)}(h)}}function y(v){switch(v.preventDefault(),v.pointerType){case"mouse":case"pen":!function(v){v.preventDefault(),p.length=0,o.setFromCamera(i,t),o.intersectObjects(e,!0,p),p.length>0&&(u=!0===d.transformGroup?e[0]:p[0].object,o.ray.intersectPlane(r,s)&&(l.copy(u.parent.matrixWorld).invert(),a.copy(s).sub(c.setFromMatrixPosition(u.matrixWorld))),n.style.cursor="move",d.dispatchEvent({type:"dragstart",object:u}))}(v)}}function f(e){switch(e.preventDefault(),e.pointerType){case"mouse":case"pen":!function(e){e.preventDefault(),u&&(d.dispatchEvent({type:"dragend",object:u}),u=null);n.style.cursor=v?"pointer":"auto"}(e)}}function g(e){e.preventDefault(),e=e.changedTouches[0];var c=n.getBoundingClientRect();if(i.x=(e.clientX-c.left)/c.width*2-1,i.y=-(e.clientY-c.top)/c.height*2+1,o.setFromCamera(i,t),u&&d.enabled)return o.ray.intersectPlane(r,s)&&u.position.copy(s.sub(a).applyMatrix4(l)),void d.dispatchEvent({type:"drag",object:u})}function b(v){v.preventDefault(),v=v.changedTouches[0];var h=n.getBoundingClientRect();i.x=(v.clientX-h.left)/h.width*2-1,i.y=-(v.clientY-h.top)/h.height*2+1,p.length=0,o.setFromCamera(i,t),o.intersectObjects(e,!0,p),p.length>0&&(u=!0===d.transformGroup?e[0]:p[0].object,r.setFromNormalAndCoplanarPoint(t.getWorldDirection(r.normal),c.setFromMatrixPosition(u.matrixWorld)),o.ray.intersectPlane(r,s)&&(l.copy(u.parent.matrixWorld).invert(),a.copy(s).sub(c.setFromMatrixPosition(u.matrixWorld))),n.style.cursor="move",d.dispatchEvent({type:"dragstart",object:u}))}function j(e){e.preventDefault(),u&&(d.dispatchEvent({type:"dragend",object:u}),u=null),n.style.cursor="auto"}h(),this.enabled=!0,this.transformGroup=!1,this.activate=h,this.deactivate=m,this.dispose=function(){m()},this.getObjects=function(){return e}};DragControls.prototype=Object.create(THREE.EventDispatcher.prototype),DragControls.prototype.constructor=DragControls;